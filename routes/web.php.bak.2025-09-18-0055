<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;

use App\Http\Controllers\ProfileController;
use App\Http\Controllers\Admin\PostController;
use App\Http\Controllers\Admin\UserController;
use App\Http\Controllers\Front\LandingController;
use App\Http\Controllers\Front\PostController as FrontPostController;

// フロント 企業 / 求人
use App\Http\Controllers\Front\CompanyController;
use App\Http\Controllers\Front\JobController;

// 管理 企業 / 求人
use App\Http\Controllers\Admin\CompanyController as AdminCompanyController;
use App\Http\Controllers\Admin\JobController as AdminJobController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

// --- フロント
Route::get('/', [LandingController::class, 'index'])->name('home');

/* ▼ フロント記事（slug でも ID でも OK）※ front_public.php より前に置く */
Route::get('/posts', [FrontPostController::class, 'index'])->name('front.posts.index');
Route::get('/posts/{slugOrId}', [FrontPostController::class, 'show'])->name('front.posts.show');
/* ▲ ここまで */

/* ▼ 企業プロフィール（ログインユーザーの編集用）← ここを先に置くのが重要！ */
Route::middleware(['auth'])->group(function () {
    Route::get('/company/edit', [\App\Http\Controllers\CompanyProfileController::class, 'edit'])->name('user.company.edit');
    Route::post('/company/update', [\App\Http\Controllers\CompanyProfileController::class, 'update'])->name('user.company.update');
});

/* ▼ 公開側 企業 / 求人（slug or id 想定） */
Route::prefix('company')->group(function () {
    Route::get('/', [CompanyController::class, 'index'])->name('front.company.index'); // 一覧(仮)

    // edit という文字を slug として受け付けないように除外
    Route::get('/{slugOrId}', [CompanyController::class, 'show'])
        ->where('slugOrId', '^(?!edit$)[A-Za-z0-9\-]+|\d+$')
        ->name('front.company.show');   // 企業詳細
});

Route::prefix('recruit_jobs')->group(function () {
    Route::get('/', [JobController::class, 'index'])->name('front.jobs.index');   // 一覧(仮)
    Route::get('/{slugOrId}', [JobController::class, 'show'])
        ->where('slugOrId', '[A-Za-z0-9\-]+|\d+$')
        ->name('front.jobs.show');     // 求人詳細
});
/* ▲ ここまで */

// --- ダッシュボード（ログイン必須）
Route::view('/dashboard', 'dashboard')->middleware(['auth'])->name('dashboard');

// --- 管理系 (/admin/...)
Route::prefix('admin')->middleware(['auth'])->name('admin.')->group(function () {
    // posts（既存のまま）
    if (class_exists(PostController::class)) {
        Route::resource('posts', PostController::class);
    } else {
        Route::get('posts', fn () => response('posts index (stub)', 200))->name('posts.index');
        Route::get('posts/create', fn () => response('posts create (stub)', 200))->name('posts.create');
        Route::post('posts', fn () => abort(501));
    }

    // users（既存のまま）
    if (class_exists(UserController::class)) {
        Route::resource('users', UserController::class)->except(['show']);
    } else {
        Route::get('users', fn () => response('users index (stub)', 200))->name('users.index');
        Route::get('users/create', fn () => response('users create (stub)', 200))->name('users.create');
    }

    // 追加: 企業と求人の管理 CRUD
    Route::resource('companies', AdminCompanyController::class);
    Route::resource('recruit_jobs', AdminJobController::class);
});

// --- プロフィール（Breeze がある場合のみ）
Route::middleware('auth')->group(function () {
    if (class_exists(ProfileController::class)) {
        Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
        Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
        Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
    }
});

// --- 認証ルート
if (file_exists(__DIR__.'/auth.php')) {
    require __DIR__.'/auth.php';
}

// --- 公開側ルート（存在すれば読み込み）
if (file_exists(__DIR__.'/front_public.php')) {
    require __DIR__.'/front_public.php';
}

/* === FRONT_ROUTES_GUARD (do not duplicate) === */
if (!Route::has('front.home')) {
    Route::get('/blog', [\App\Http\Controllers\Front\HomeController::class, 'index'])->name('front.home');

    // ★ /posts 系はすでに前方で登録済み。ここでは定義しない（重複禁止）
    // Route::get('/posts', ...);
    // Route::get('/posts/{post:slug}', ...);

    Route::get('/category/{slug}', [\App\Http\Controllers\Front\CategoryController::class, 'show'])->name('front.category.show');
    Route::get('/tag/{slug}', [\App\Http\Controllers\Front\TagController::class, 'show'])->name('front.tag.show');
}

/* ===== DEBUG (必要なら後で削除) ===== */
Route::get('/__ping', fn() => 'pong');

Route::get('/__create-plain', function () {
    $post = new \App\Models\Post();
    $post->published_at = now();
    $categories = \App\Models\Category::orderBy('name')->get();
    $tags = \App\Models\Tag::orderBy('name')->get();
    return view('admin.posts.debug_create', compact('post','categories','tags'));
});

Route::get('/ping-ok', fn() => 'pong');

Route::get('/debug-create', function () {
    $post = new \App\Models\Post(); $post->published_at = now();
    $categories = \App\Models\Category::orderBy('name')->get();
    $tags = \App\Models\Tag::orderBy('name')->get();
    return view('admin.posts.debug_create', compact('post','categories','tags'));
});

// 非管理: アップロード疎通テスト
Route::match(['get','post'], '/__upload-test', function (Request $r) {
    if ($r->isMethod('post')) {
        if (!$r->hasFile('f')) return 'no file';
        $f = $r->file('f');
        if (!$f->isValid()) return 'err: '.$f->getError();
        $p = $f->store('thumbnails', 'public');   // 文字列パスが返る
        return 'stored: '.Storage::url($p);
    }
    return '<form method="post" enctype="multipart/form-data">'.csrf_field().'<input type="file" name="f" accept="image/*"><button>send</button></form>';
});

// 管理配下: アップロード疎通テスト（要ログイン）
Route::prefix('admin')->middleware(['auth'])->group(function () {
    Route::match(['get','post'], 'posts/__upload-test', function (Request $r) {
        if ($r->isMethod('post')) {
            if (!$r->hasFile('f')) return 'no file';
            $f = $r->file('f');
            if (!$f->isValid()) return 'err: '.$f->getError();
            $p = $f->store('thumbnails', 'public'); // 文字列パスが返る
            return 'stored: '.Storage::url($p);
        }
        return '<form method="post" enctype="multipart/form-data">'.csrf_field().'<input type="file" name="f" accept="image/*"><button>send</button></form>';
    })->name('admin.posts.uploadtest');
});

// 事前アップロードAPI（要ログイン）
Route::post('/__preupload', function (Request $r) {
    if (!$r->hasFile('thumbnail')) {
        return response()->json(['ok' => false, 'msg' => 'no file'], 422);
    }
    $f = $r->file('thumbnail');
    if (!$f->isValid()) {
        return response()->json(['ok' => false, 'msg' => 'err: '.$f->getError()], 422);
    }
    if ($f->getSize() > 40 * 1024 * 1024) {
        return response()->json(['ok' => false, 'msg' => 'too large'], 413);
    }

    $path = $f->store('thumbnails', 'public');

    return response()->json([
        'ok'  => true,
        'path'=> $path,
        'url' => Storage::url($path),
    ]);
})->middleware(['auth'])->name('preupload');

// ==== User Profile (自己紹介) ====
Route::middleware(['auth'])->group(function () {
    Route::get('/profile/edit', [\App\Http\Controllers\UserProfileController::class, 'edit'])->name('user.profile.edit');
    Route::post('/profile/update', [\App\Http\Controllers\UserProfileController::class, 'update'])->name('user.profile.update');
});

/* ===== TEMP DIAG: /__company-diag (作業後に削除推奨) ===== */
Route::get('/__company-diag', function () {
    $count = \App\Models\Company::withoutGlobalScopes()->count();
    $route = collect(\Illuminate\Support\Facades\Route::getRoutes())
        ->firstWhere('uri', 'company');
    return response()->json([
        'company_count' => $count,
        'company_route' => optional($route)->getActionName(),
        'view_used'     => 'front.company.index',
    ]);
});

require __DIR__.'/zz_diag.php';
